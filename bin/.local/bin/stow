#!/usr/bin/env zsh

set -euo pipefail

typeset -a PACKAGES
typeset ACTION="install"
typeset STOW_DIR="${PWD}"
typeset TARGET_DIR
typeset RUN_COMMAND_FUNC="run_command"
typeset VERBOSE=":"

function run_command() {
  $VERBOSE "${@}\n"
  eval "${@}"
}

function print_err() {
  printf "$*" >&2
}

function print_help() {
  # Help message was borrowed from the original stow.
  print_err 'stow [-nSDvh] [-t DIR] [-d DIR] package [package2...]

  -n		Do not perform any operations that modify the filesystem; merely show what would happen.
  -d DIR	Set the stow directory to "DIR" instead of the current directory.
  		This also has the effect of making the default target directory be the parent of "DIR".
  -t DIR	Set the target directory to "DIR" instead of the parent of the stow directory.
  -S		Stow the packages into the target directory. This is the default action and so can be omitted.
  -D		Unstow the packages from the target directory rather than installing them.
  -v		Send verbose output.
  -h		Show Stow command syntax, and exit.
'
}

# Normalize a pathname by collapsing redundant separators and up-level
# references so that A/./B and A/foo/../B all become A/B.
function normalize() {
  python3 -c "import os,sys; print(os.path.normpath(sys.argv[1]))" "${1}"
}

# Return the canonical (absolute) path of the specified filename, eliminating
# any symbolic links encountered.
function canonize() {
  python3 -c "import os,sys; print(os.path.realpath(sys.argv[1]))" "${1}"
}

function list_files() {
  local target="${1}"

  # Return the list of regular files and symlinks using glob path expansion.
  echo "${target}"/**/*(ND.) "${target}"/**/*(ND@)
}

function list_leaf_dirs() {
  local target="${1}"

  # Return all leaf directories (directories without subdirectories). See
  # https://unix.stackexchange.com/a/497257
  # Temporary disable triggering errors because anonymous function returns 1
  # (error status) when the folder is a leaf folder.
  set +e
  echo "${target}"/**/*(NDF^e['()(($#)) $REPLY/*(ND/Y1)'])
  set -e
}

function install_package() {
  local package_name="${1}" commands=() package_path

  # Obtain absolute path to a package to install.
  package_path="$(canonize "${STOW_DIR}/${package_name}")"

  # In case the package dir doesn't exist, fail early.
  if [[ ! -d "${package_path}" ]] ; then
    print_err "Package '${package_name}' at path '${package_path}' doesn't exist."
    return 1
  fi

  # The following commands depend on the package dir/file paths to be relative
  # to the package dir, so temporarily move in the package folder.
  pushd "${package_path}"

  # There is no need to invoke 'mkdir' for every folder in a package. The '-p'
  # option allows us to create all intermediate directories for a given path if
  # they don't exist. So, we can invoke 'mkdir -p' only for leaf directories
  # (directories without subdirectories) in order to create all intermediate
  # directories in one call.
  local package_dir target_package_dir
  for package_dir in $(list_leaf_dirs "."); do
    target_package_dir="$(normalize "${TARGET_DIR}/$package_dir")"
    commands+=( "mkdir -p '${target_package_dir}'" )
  done

  # Create a symlink for every file in the package.
  local package_file target_package_file normalized_package_file
  for package_file in $(list_files "."); do
    target_package_file="$(normalize "${TARGET_DIR}/${package_file}")"
    normalized_package_file="$(normalize "${package_path}/${package_file}")"
    commands+=("ln -sf '${normalized_package_file}' '${target_package_file}'")
  done

  # Restore original working directory.
  popd

  # Execute all commands required to install the package.
  for command in "${commands[@]}"; do
    eval "${RUN_COMMAND_FUNC}" "${command}"
  done
}

function delete_package() {
  local package_name="${1}" commands=() package_path

  # Obtain absolute path to a package to delete.
  package_path="$(canonize "${STOW_DIR}/${package_name}")"

  # In case the package dir doesn't exist, fail early.
  if [[ ! -d "${package_path}" ]] ; then
    print_err "Package '${package_name}' at path '${package_path}' doesn't exist."
    return 1
  fi

  # The following commands depend on the package dir/file paths to be relative
  # to the package dir, so temporarily move in the package folder.
  pushd "${package_path}"

  # Remove files and symlinks first.
  local package_file target_package_file
  for package_file in $(list_files "."); do
    target_package_file="$(normalize "${TARGET_DIR}/${package_file}")"

    # TODO: check whether file is a symlink pointing to the original file
    # before removing it.
    commands+=("rm -f '${target_package_file}'")
  done

  # In order to delete empty folders left after removing all the files,
  # we traverse package folders in post-only order ('find -depth' option).
  local package_dir target_package_dir
  while IFS= read -r -d '' package_dir; do
    target_package_dir="$(normalize "${TARGET_DIR}/$package_dir")"
    commands+=( "find '${target_package_dir}' -type d -empty -delete" )
  done < <(find "${target}" -mindepth 1 -type d -depth -print0)

  # Restore original working directory.
  popd

  # Execute all commands required to delete the package.
  for command in "${commands[@]}"; do
    eval "${RUN_COMMAND_FUNC}" "${command}"
  done
}

function packages_apply() {
  local action_func="${1}" package

  for package in "${PACKAGES[@]}"; do
    $VERBOSE "Processing package '${package}'...\n"
    eval "${action_func}" "${package}"
  done
}

functions install_packages() {
  packages_apply install_package
}

function delete_packages() {
  packages_apply delete_package
}

function parse_options() {
  local option

  while getopts ":hnSDRvt:d:" option; do
    case "${option}" in
      S) ACTION="install" ;;
      D) ACTION="delete" ;;
      n) RUN_COMMAND_FUNC="echo" ;;
      v) VERBOSE=print_err ;;
      d) STOW_DIR="${OPTARG}" ;;
      t) TARGET_DIR="${OPTARG}" ;;
      h) print_help; exit 1 ;;
      *)
        print_err "Invalid flag: '${OPTARG}'\n"
        print_help
        exit 1
        ;;
    esac
  done
  shift $(( OPTIND - 1 ))

  # Treat remaining command parameters as arguments (stow packages).
  PACKAGES=( "${@}" )
}

function main() {
  # Parse command line options.
  parse_options "${@}"

  # If there are no packages provided then exit early with proper error message.
  if [[ "${#PACKAGES[@]}" -eq 0 ]] ; then
    print_err "At least one package should be provided.\n"
    print_help
    exit 1
  fi

  # Obtain actual absolute path to the stow dir.
  STOW_DIR="$(canonize "${STOW_DIR}")"

  # If target directory was not provided then use parent of the stow directory.
  if [[ -z "${TARGET_DIR}" ]] ; then
    TARGET_DIR="$(dirname "${STOW_DIR}")"
  fi

  # Obtain actual absolute path to the target dir.
  TARGET_DIR="$(canonize "${TARGET_DIR}")"

  $VERBOSE "Stow directory: '${STOW_DIR}'\n"
  $VERBOSE "Target directory: '${TARGET_DIR}'\n"
  $VERBOSE "Execute action: '${ACTION}'.\n"

  # Decide on which stow action to execute.
  case "${ACTION}" in
    install) install_packages ;;
    delete)  delete_packages  ;;
    *)
      # It is unreachable code path, but it was added for completeness.
      print_err "Unsupported action: '${ACTION}'."
      show_help
      exit 1
      ;;
  esac
}

main "${@}"

