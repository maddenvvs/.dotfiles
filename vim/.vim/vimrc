" Vim config file.

" Reload vimrc:
"   :so %
"   :so $MYVIMRC

" Load vim defaults.
" :h skip_defaults_vim
unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Automatically bootstrap vim-plug plugins.
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Define external plugins with vim-plug.
" plug#begin([PLUG_HOME]) supports providing the directory where to install
" Vim plugins. When not provided, it will use platform-specific Vim/Neovim
" independent path, which is preferred.
call plug#begin()

  " Simplify commenting out things.
  Plug 'tpope/vim-commentary'

  " Better work with text object surrounds like braces.
  Plug 'tpope/vim-surround'

  " Custom theme.
  Plug 'morhetz/gruvbox'

  " Status bar plugin.
  Plug 'vim-airline/vim-airline'

  " Fuzzy search (fzf) plugin.
  Plug 'junegunn/fzf'

  " Useful fzf-based Vim commands and mappings.
  Plug 'junegunn/fzf.vim'

  " Linting and autosuggestions.
  Plug 'dense-analysis/ale'

  " If I want to enable full distraction mode (current window is center
  " aligned with equal paddings to left and right) then uncomment the line
  " below.
  " Plug 'junegunn/goyo.vim'

  " todo.txt syntax highlighting with additional key mappings.
  Plug 'freitass/todo.txt-vim'

call plug#end()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" During searching, take the case into the account when using capital letters.
set ignorecase
set smartcase

" Disable error bell sound.
set belloff=all

" Add vertical line denoting 80 symbols border.
set colorcolumn=80

" Enable current line highlighting.
set cursorline

" Enable line numbers.
set number
set relativenumber

" Tabs and indenting.
set autoindent
set smartindent
set smarttab
set expandtab
set shiftwidth=2

" Disable backups and swapfile, use persistent undo instead.
set nobackup
set nowritebackup
set noswapfile
if has('persistent_undo')
  set undofile undodir=~/.cache/vim/undo
  call mkdir(&undodir, "p", 0700)
endif

" Shorter update time than the 4000ms default, for async vim operations.
set updatetime=2000

" Disable --[NORMAL/INSERT/VISUAL]-- because vim-airline already displays it.
set noshowmode

" Better splits.
set splitbelow
set splitright

" Automatically read a file when it was modified outside of Vim.
set autoread

" Better display of non-printable characters.
set list
set listchars=tab:»\ ,space:•,extends:›,precedes:‹,nbsp:␣

" Enable True Color support if possible.
if (has("termguicolors"))
  set termguicolors
endif

" Background color brightness.
set background=dark


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key bindings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set leader key. Default is '\'.
let mapleader="\<Space>"

" Set local leader key.
let maplocalleader="\<Space>l"

" Make Y behave like C and D (do operation from the cursor to the end of line).
nnoremap Y y$

" Save a buffer both in NORMAL in INSERT modes.
inoremap <C-s>     <C-O>:update<cr>
nnoremap <C-s>     :update<cr>

" Comment/uncomment using tpope/commentary plugin.
noremap <leader>/ :Commentary<cr>

" Ctrl-P behaviour like in VS Code.
" The displayed filelist depends on $FZF_DEFAULT_COMMAND environment variable
" defined in zsh configuration files.
nnoremap <leader>p :Files<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Make :h and :help to open in a new tab instead of a new split window.
" Taken from here: https://stackoverflow.com/a/3132202
cnoreabbrev <expr> h
  \ getcmdtype() == ":" && getcmdline() == 'h' ? 'tab help' : 'h'
cnoreabbrev <expr> help
  \ getcmdtype() == ":" && getcmdline() == 'help' ? 'tab help' : 'help'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Gruvbox
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use medium contrast variant of the theme.
let g:gruvbox_contrast_dark = 'medium'

" Enforce italic usage on terminals.
let g:gruvbox_italic = 1

" Vim always reads .vimrc file first and after that starts to load plugins. We
" use autocmd VimEnter to make sure that all plugins are loaded completely and
" then use gruvbox. ++nested is used to allow automatic filetype detection.
autocmd VimEnter * ++nested colorscheme gruvbox


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Airline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Automatically populate the g:airline_symbols dictionary with the powerline
" symbols.
let g:airline_powerline_fonts = 1

" Automatically displays all buffers when there's only one tab open.
let g:airline#extensions#tabline#enabled = 1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Kitty terminal
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim uses background color erase when Vim theme declares background color.
" Kitty terminal emulator doesn't support background color erase which leads
" to incorrect displaying of background color when scrolling. The following
" line effectively fixes the issue. For more information please see:
" https://sw.kovidgoyal.net/kitty/faq/#using-a-color-theme-with-a-background-color-does-not-work-well-in-vim
let &t_ut=''

" Change the cursor in different modes.
" Normal - block, Insert - bar, Replace - underline.
let &t_SI = "\e[5 q"
let &t_SR = "\e[3 q"
let &t_EI = "\e[2 q"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ALE
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ale_fixers = {
\  '*': ['trim_whitespace'],
\}

let g:ale_fix_on_save = 1

